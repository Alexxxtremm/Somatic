import json
import logging
from typing import List, Tuple

from pyquaternion import Quaternion

test_data = foo = [(Quaternion(0, 0, 0, 0), 0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20549.0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20550.0), (Quaternion(0.999936173327229, 0.0003992956666974967, -0.011280102584204421, -0.0004991195833718431), 20548.0), (Quaternion(0.999936173327229, 0.0003992956666974967, -0.011280102584204421, -0.0004991195833718431), 20550.0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20548.0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20550.0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20548.0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20550.0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20548.0), (Quaternion(0.9999581117265831, 0.0044117273554567515, -0.005414392663514983, -0.0059157253175441404), 20550.0), (Quaternion(0.9997531254811922, 0.014756874128500352, -0.014857261027333701, -0.007428630513666823), 20549.0), (Quaternion(0.9994388712365438, 0.028444185969883684, -0.009880611968485858, -0.014671211710782117), 20547.0), (Quaternion(0.9992535402213627, 0.03451237126868964, -0.013945405832406499, -0.010333646048473921), 20551.0), (Quaternion(0.9986480453519424, 0.0448819300494992, -0.023394831547054296, -0.01184802627704895), 20549.0), (Quaternion(0.9975504329878383, 0.0645845459781007, -0.022464189905426313, -0.014742124625436004), 20550.0), (Quaternion(0.9968575472222709, 0.0758260815160027, -0.022036641920106487, -0.006310492913484955), 20547.0), (Quaternion(0.9950669485553206, 0.09251988321755766, -0.03563877982482638, -0.0034229336554917333), 20551.0), (Quaternion(0.9920927769785454, 0.1187435385370939, -0.039947363679425946, 0.00749013068989246), 20548.0), (Quaternion(0.9907833300935588, 0.12974063940224725, -0.038378248146161587, 0.00654747015616941), 20550.0), (Quaternion(0.9865261746041143, 0.154772729126094, -0.052490751157105414, 0.007498678736729381), 20549.0), (Quaternion(0.9842407329206673, 0.1703493576208848, -0.04626772676122795, 0.010515392445733684), 20548.0), (Quaternion(0.9804142474438596, 0.18714259661761376, -0.05986955855292417, 0.013460605446462881), 20549.0), (Quaternion(0.9749437089627084, 0.21282638500999065, -0.06297411203457479, 0.01496513986148601), 20549.0), (Quaternion(0.9714084365247156, 0.22772576260948366, -0.06664653176281082, 0.008053961542333732), 20549.0), (Quaternion(0.9687957628388707, 0.23833539846098187, -0.06603144934203195, 0.016457686462147902), 20549.0), (Quaternion(0.9648592407895865, 0.2531800300446206, -0.06967980969853935, 0.009552066264590542), 20549.0), (Quaternion(0.9648592407895865, 0.2531800300446206, -0.06967980969853935, 0.009552066264590542), 20549.0), (Quaternion(0.961986747836407, 0.2636170329713141, -0.06903539936040876, 0.017935176321499546), 20550.0), (Quaternion(0.961986747836407, 0.2636170329713141, -0.06903539936040876, 0.017935176321499546), 20547.0), (Quaternion(0.961986747836407, 0.2636170329713141, -0.06903539936040876, 0.017935176321499546), 20551.0), (Quaternion(0.9680182800121084, 0.2432636988792136, -0.060337455746852536, 0.011080334110440515), 20549.0), (Quaternion(0.9709955750944035, 0.23326493865526413, -0.050951035476171413, 0.012611642444596949), 20548.0), (Quaternion(0.9753960028763419, 0.2149143811574919, -0.048290882302797544, 0.009079484069327737), 20550.0), (Quaternion(0.9824626821330882, 0.18397989812370824, -0.03007845745891688, 0.003709676419933139), 20548.0), (Quaternion(0.9852080757898622, 0.16948730276557203, -0.025251385990103015, 0.0012120665275250908), 20549.0), (Quaternion(0.9888346908815168, 0.14793432026567185, -0.017539638242881073, 0.003708380657066357), 20549.0), (Quaternion(0.9932076490010029, 0.1154213954816769, -0.008955975761001989, -0.011672957171642906), 20550.0), (Quaternion(0.9948998379071278, 0.10061235266506416, -0.005411421358479496, -0.004709940812009927), 20548.0), (Quaternion(0.9967965486494879, 0.07904555503027039, 0.0036112182501138734, -0.01163614769481136), 20550.0), (Quaternion(0.9986996997380079, 0.048981452610266124, 0.012144991323447207, -0.007226771696596634), 20548.0), (Quaternion(0.9990980642901117, 0.03767338100641454, 0.011754094874001364, -0.015672126498668393), 20550.0), (Quaternion(0.9996734993224847, 0.011898494340805699, 0.014798127415455886, -0.01709783640569562), 20549.0), (Quaternion(0.9996734993224847, 0.011898494340805699, 0.014798127415455886, -0.01709783640569562), 20548.0), (Quaternion(0.9995706904082257, 0.0006001625280145362, 0.014403900672349118, -0.02550690744061823), 20549.0), (Quaternion(0.9994580465978037, 0.00498085341671381, 0.008965536150084968, -0.0312797594569631), 20549.0), (Quaternion(0.9995620441851932, 0.010918154405870933, 0.005008327709115218, -0.027044969629221538), 20550.0), (Quaternion(0.9993448090181148, 0.015260979716515799, -0.00039897986186965273, -0.032816093638782295), 20548.0), (Quaternion(0.9989500302905256, 0.03162187313250078, -0.013853392039000323, -0.030116069650000743), 20549.0), (Quaternion(0.9987523833026928, 0.042935518285812824, -0.013442428622193747, -0.02166839240592422), 20548.0), (Quaternion(0.9975504329878383, 0.0645845459781007, -0.022464189905426313, -0.014742124625436004), 20551.0), (Quaternion(0.9965447203834132, 0.07494401551660226, -0.031903878091404936, -0.016252919027696766), 20548.0), (Quaternion(0.9957529736483921, 0.08616900355580773, -0.031461705949446084, -0.007815328229480223), 20549.0), (Quaternion(0.9923744229621585, 0.11598532298600547, -0.039894951613289764, -0.01219845638301087), 20550.0), (Quaternion(0.9896622708964419, 0.13273141139546482, -0.05351425285460115, -0.009337383706337465), 20548.0), (Quaternion(0.9869010829627787, 0.15206966372696906, -0.05245852784261473, -0.012213626711448433), 20549.0), (Quaternion(0.9817967012656883, 0.17707655607336406, -0.06551330941411146, -0.020667292096947842), 20549.0), (Quaternion(0.9781876909708654, 0.1960972974031714, -0.06436628925975654, -0.023487698720563333), 20550.0), (Quaternion(0.9746661210548375, 0.2108821240436256, -0.06802325996466588, -0.030455185610100688), 20549.0), (Quaternion(0.9658055774627747, 0.2423816975617295, -0.0852861740798119, -0.03459722156067835), 20550.0), (Quaternion(0.9609944868952127, 0.26086137310868596, -0.0839519340384301, -0.0373230886726274), 20548.0), (Quaternion(0.9562852354620933, 0.2754854805699514, -0.08755429455205, -0.044278029967970256), 20550.0), (Quaternion(0.9512813479006776, 0.29005659142882173, -0.09113772610051807, -0.051233639205021664), 20548.0), (Quaternion(0.9489517123433098, 0.2969371904640079, -0.09545846671759603, -0.04697481976513934), 20549.0), (Quaternion(0.9489038152308018, 0.2995533488513206, -0.0954631604859962, -0.0271316350854936), 20550.0), (Quaternion(0.9489038152308018, 0.2995533488513206, -0.0954631604859962, -0.0271316350854936), 20548.0), (Quaternion(0.9513291715311211, 0.2927012571563584, -0.09115610678038541, -0.03145386541652845), 20549.0), (Quaternion(0.956234114979946, 0.2781135118293323, -0.08756722664651517, -0.024518823461024186), 20548.0), (Quaternion(0.9624151930137379, 0.25791197612862937, -0.07899371879085992, -0.03159748751634395), 20551.0), (Quaternion(0.9654068964642916, 0.24619774300227854, -0.08033400380431496, -0.03037504621456677), 20548.0), (Quaternion(0.9738080186585186, 0.21567560144785988, -0.062339800884696095, -0.035996207607614794), 20550.0), (Quaternion(0.9784539095679109, 0.19470162900314636, -0.05349500433990023, -0.04309880538327798), 20549.0), (Quaternion(0.9844834544882644, 0.16212185445812258, -0.04610528574738426, -0.04881736137958331), 20548.0), (Quaternion(0.9884706843506142, 0.1362231773237401, -0.0429333725291316, -0.05025612064741802), 20549.0), (Quaternion(0.9902710366370392, 0.12594144213411881, -0.03351748340461802, -0.04877094890612088), 20549.0), (Quaternion(0.9945601794248146, 0.08969561356463357, -0.020922302717643254, -0.04865186182188813), 20550.0), (Quaternion(0.9957712495096097, 0.07440596090875642, -0.016008860330842062, -0.051449859302265866), 20548.0), (Quaternion(0.9971527655785155, 0.05974095780908678, -0.01242932679249456, -0.04430453582485966), 20550.0), (Quaternion(0.9978843281320502, 0.04423621327375252, -0.007456673763684918, -0.047057657400552066), 20549.0), (Quaternion(0.9983892076915333, 0.03382663847780126, 0.002013490385583405, -0.04550488271418501), 20549.0), (Quaternion(0.9983627991017777, 0.02773508127080454, 0.006007598831221261, -0.04966281700476194), 20549.0), (Quaternion(0.9990618152779704, 0.019330218581318087, 0.0055086115128109014, -0.038359967443755694), 20550.0), (Quaternion(0.9990618152779704, 0.019330218581318087, 0.0055086115128109014, -0.038359967443755694), 20548.0), (Quaternion(0.9991705820562159, 0.009002437920218181, 0.01490403611236124, -0.036809968384892144), 20548.0), (Quaternion(0.9992995729531524, 0.004620341778655612, 0.020389769153632636, -0.031036643687056387), 20550.0), (Quaternion(0.9992995729531524, 0.004620341778655612, 0.020389769153632636, -0.031036643687056387), 20548.0), (Quaternion(0.9989976019407614, -0.0067309774064793215, 0.019992007520737376, -0.03948170329472228), 20549.0), (Quaternion(0.9989976019407614, -0.0067309774064793215, 0.019992007520737376, -0.03948170329472228), 20549.0), (Quaternion(0.9989976019407614, -0.0067309774064793215, 0.019992007520737376, -0.03948170329472228), 20550.0), (Quaternion(0.9992691970926477, -0.010705026440620075, 0.014006576651278663, -0.033915924891310345), 20548.0), (Quaternion(0.9992691970926477, -0.010705026440620075, 0.014006576651278663, -0.033915924891310345), 20550.0), (Quaternion(0.9996985432071408, -0.013278346518750483, 0.009556385752131052, -0.018308023230398485), 20548.0), (Quaternion(0.9997629112886919, -0.017226930549153974, 0.0036056366265671547, -0.012820041338905352), 20550.0), (Quaternion(0.9997629112886919, -0.017226930549153974, 0.0036056366265671547, -0.012820041338905352), 20549.0), (Quaternion(0.999699068641825, -0.02171947282504863, 0.009049780343770325, -0.006938164930223867), 20548.0), (Quaternion(0.9997749160512339, -0.016194734166613295, 0.013395644310655486, -0.002899057350813472), 20550.0), (Quaternion(0.9999006139614275, -0.010353851738014203, 0.009449146246343049, 0.0015078424861185713), 20548.0), (Quaternion(0.9999006139614275, -0.010353851738014203, 0.009449146246343049, 0.0015078424861185713), 20550.0), (Quaternion(0.9999006139614275, -0.010353851738014203, 0.009449146246343049, 0.0015078424861185713), 20548.0), (Quaternion(0.99996482545677, -0.0059074721840342015, 0.004005065887480869, -0.004405572476228914), 20549.0), (Quaternion(0.99996482545677, -0.0059074721840342015, 0.004005065887480869, -0.004405572476228914), 20548.0), (Quaternion(0.9999006139614275, -0.010353851738014203, 0.009449146246343049, 0.0015078424861185713), 20551.0), (Quaternion(0.9999006139614275, -0.010353851738014203, 0.009449146246343049, 0.0015078424861185713), 20548.0), (Quaternion(0.99996482545677, -0.0059074721840342015, 0.004005065887480869, -0.004405572476228914), 20549.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20550.0), (Quaternion(0.9997720961653754, -0.0078005625188455885, 0.013901002437429977, -0.01420102407277024), 20548.0), (Quaternion(0.999863067861652, 0.0025039143240048745, 0.0045070457832089295, -0.01572458195475096), 20550.0), (Quaternion(0.999863067861652, 0.0025039143240048745, 0.0045070457832089295, -0.01572458195475096), 20548.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20550.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20548.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20550.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20548.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20550.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20549.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20549.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20550.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20548.0), (Quaternion(0.9999000486187193, -0.001910701088580491, 0.009955758303656165, -0.009855195088467716), 20549.0), (Quaternion(0.9997720961653754, -0.0078005625188455885, 0.013901002437429977, -0.01420102407277024), 20548.0), (Quaternion(0.9995706904082257, 0.0006001625280145362, 0.014403900672349118, -0.02550690744061823), 20551.0), (Quaternion(0.9993600482158447, -0.00040078606305027353, 0.004609039725078118, -0.035469566579948764), 20548.0), (Quaternion(0.9989927932479765, 0.014003630320842009, 0.0011082009606422083, -0.0426153642137852), 20550.0), (Quaternion(0.9989927932479765, 0.014003630320842009, 0.0011082009606422083, -0.0426153642137852), 20549.0), (Quaternion(0.9990618152779704, 0.019330218581318087, 0.0055086115128109014, -0.038359967443755694), 20548.0), (Quaternion(0.9993448090181148, 0.015260979716515799, -0.00039897986186965273, -0.032816093638782295), 20549.0), (Quaternion(0.9990618152779704, 0.019330218581318087, 0.0055086115128109014, -0.038359967443755694), 20549.0), (Quaternion(0.9990618152779704, 0.019330218581318087, 0.0055086115128109014, -0.038359967443755694), 20549.0), (Quaternion(0.9984914207963453, 0.012071224107955025, 0.011065288765625458, -0.05240923133537134), 20549.0), (Quaternion(0.9984914207963453, 0.012071224107955025, 0.011065288765625458, -0.05240923133537134), 20550.0), (Quaternion(0.9984914207963453, 0.012071224107955025, 0.011065288765625458, -0.05240923133537134), 20548.0), (Quaternion(0.9984914207963453, 0.012071224107955025, 0.011065288765625458, -0.05240923133537134), 20550.0), (Quaternion(0.99909465835677, 0.0036220954381514237, 0.010564445027941766, -0.04105041496571615), 20549.0), (Quaternion(0.9992995729531524, 0.004620341778655612, 0.020389769153632636, -0.031036643687056387), 20550.0), (Quaternion(0.9995706904082257, 0.0006001625280145362, 0.014403900672349118, -0.02550690744061823), 20548.0), (Quaternion(0.9995706904082257, 0.0006001625280145362, 0.014403900672349118, -0.02550690744061823), 20549.0), (Quaternion(0.9992486605140153, -0.0008082901197282444, 0.01606476612959845, -0.03526165647314372), 20549.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20549.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20549.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20549.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20548.0), (Quaternion(0.9984956577450782, 0.0017076887506706495, 0.020492265008047822, -0.0508288534023148), 20550.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20548.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20550.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20549.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20550.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20549.0), (Quaternion(0.9988690091883254, -0.002301080449852888, 0.01450681153168143, -0.045221233188413756), 20550.0)]

standard_gesture_time = 1000  # Milliseconds
sampling_rate = 10  # Milliseconds

logging.basicConfig(level=logging.DEBUG)

class Gesture:
    def __init__(self, glyph, raw_data, normalized_quats=None):
        """

        :param normalized_quats:
        :type normalized_quats: list of Quaternion or None
        :param raw_data:
        :type raw_data list of tuple of Quaternion, float or None
        :param glyph:
        :type glyph: str
        """
        if normalized_quats is not None and not len(normalized_quats) is 100:
            raise AttributeError('Normalized data invalid - got {} normalized_data instead of {}'
                                 .format(len(normalized_quats), standard_gesture_time / sampling_rate))

        if raw_data is None:
            raise AttributeError('Must provide one source of data')

        if normalized_quats is None:
            normalized_quats = Gesture.normalize_samples(raw_data)

        self.raw_quats = [x[0] for x in raw_data]
        self.raw_timedeltas = [x[1] for x in raw_data]
        self.normalized_data = normalized_quats
        self.glyph = glyph

    def to_dict(self):
        datastore = {
            'g': self.glyph,
            'r': [(s.w, s.x, s.y, s.z, ts) for s, ts in zip(self.raw_quats, self.raw_timedeltas)],
            'n': [(s.w, s.x, s.y, s.z) for s in self.normalized_data]
        }
        return datastore

    @staticmethod
    def from_dict(datastore):
        try:
            glyph = datastore['g']

            raw_data = [(Quaternion(w=e[0], x=e[1], y=e[2], z=e[3]), e[4]) for e in datastore['r']]
            normalized_quats = [Quaternion(w=e[0], x=e[1], y=e[2], z=e[3]) for e in datastore['n']]
            assert len(normalized_quats) is round(standard_gesture_time / sampling_rate)

            return Gesture(glyph, raw_data, normalized_quats)

        except (AssertionError, AttributeError, KeyError):
            logging.exception('Error parsing dict {}...'.format(str(datastore)[:20]))

        return None

    @staticmethod
    def normalize_samples(samples: List[Tuple[Quaternion, int]]):
        if not samples:
            raise AttributeError('Samples and/or timedeltas not provided')

        if not len(samples):
            raise AttributeError('Samples and/or timedeltas list are empty')

        logging.info('Normalizing:\n{0!r}'.format(samples))

        quats = [x[0] for x in samples]
        timedeltas = [x[1] for x in samples]

        scaling_factor = standard_gesture_time / sum(timedeltas)
        # Standardize times to 1 second
        scaled_times = [delta * scaling_factor for delta in timedeltas]

        logging.debug(scaled_times)

        output = []

        # Interpolate to increase/reduce number of samples to required sampling rate
        for earliest_time in range(0, standard_gesture_time, sampling_rate):
            # For each sample required, find the latest sample before this time, and the earliest sample
            # after this time, and slerp them.

            early_sample = None
            early_time = None
            late_sample = None
            late_time = None

            latest_time = earliest_time + sampling_rate

            sample_time = 0
            for index, sample in enumerate(quats):
                if index:
                    sample_time += scaled_times[index]

                if early_sample is None and sample_time >= earliest_time:
                    # This sample is the latest sample that began earlier than the early time.
                    early_sample = quats[index]
                    early_time = sample_time - scaled_times[index]

                if late_sample is None and sample_time >= latest_time:
                    # This sample is the latest sample that began earlier than the late time.
                    late_sample = quats[index]
                    late_time = sample_time

                if early_sample and late_sample:
                    continue

            if early_sample is None or late_sample is None:
                raise AttributeError('Something went wrong - no quats work')

            amount = (earliest_time - early_time) / (late_time - early_time)  # Just the Arduino map function
            output.append(Quaternion.slerp(early_sample, late_sample, amount))

        return output


class GestureTrainingSet:
    big_ole_list_o_glyphs = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.,?!@#/ 1234567890'
    current_version = 1  # For deleting old saves

    def __init__(self):
        self.target_examples_per_glyph = 100

        self.examples = []

    @staticmethod
    def load(pathspec):
        with open(pathspec, 'r') as f:
            datastore = json.load(f)

            if 'version' not in datastore or datastore['version'] != GestureTrainingSet.current_version:
                logging.warning("Saved file is outdated, not loading")
                return

            output = GestureTrainingSet()

            for sample_record in datastore['examples']:
                output.add(Gesture.from_dict(sample_record))

            return output

    def save(self, pathspec):
        datastore = {'version': GestureTrainingSet.current_version, 'examples': [x.to_dict() for x in self.examples]}
        with open(pathspec, 'w') as f:
            json.dump(datastore, f)

    def add(self, example: Gesture):
        self.examples.append(example)

    def count(self, glyph):
        return len([example for example in self.examples if example.glyph == glyph])

    def summarize(self):
        return {glyph: self.count(glyph) for glyph in self.big_ole_list_o_glyphs}